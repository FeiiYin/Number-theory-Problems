const int N = 400005;
const int g=3;
const long long MOD=(479<<21)+1;
int len;
char A[N],B[N];
long long a[N],b[N],qp[30];
long long q_pow(long long x,long long y,long long P) {
    long long ans=1; while(y>0) {
        if(y&1)ans=ans*x%P;
        x=x*x%P; y>>=1;
    }
    return ans;
}
void init() {
    len=1;
    for(int i=0;i<21;i++) {
        int t=1<<i; qp[i]=q_pow(g,(MOD-1)/t,MOD);
    }
    int len1=strlen(A); int len2=strlen(B);
    while(len<=2*len1||len<=2*len2)len<<=1;
    for(int i=0;i<len1;i++)a[len1-i-1]=A[i]-'0';
    for(int i=len1;i<len;i++)a[i]=0;
    for(int i=0;i<len2;i++)b[len2-i-1]=B[i]-'0';
    for(int i=len2;i<len;i++)b[i]=0;
}
///雷德算法，2^M=len，将第i位的数与“i的二进制反转之后的位”的数交换
void rader(long long F[],int len){
    int j=len/2;///模拟二进制反转进位的的位置
    for(int i=1;i<len-1;i++) {
        if(i<j)swap(F[i],F[j]);///该出手时就出手
        int k=len/2;
        while(j>=k) {
            j-=k; k>>=1;
        } if(j<k)j+=k;
    }
}
void NTT(long long F[],int len,int t) {
    int id=0; rader(F,len);
    for(int h=2;h<=len;h<<=1) {
        id++;
        for(int j=0;j<len;j+=h) {
            long long E=1;///原根次幂
            for(int k=j;k<j+h/2;k++) {
                long long u=F[k];///蝶型操作
                long long v=(E*F[k+h/2])%MOD;
                F[k]=(u+v)%MOD;///前半部分
                F[k+h/2]=((u-v)%MOD+MOD)%MOD;///后半部分
                E=(E*qp[id])%MOD;
            }
        }
    }
    //p(F);
    if(t==-1){///插值
        for(int i=1;i<len/2;i++)swap(F[i],F[len-i]);///i+lne-i=i;
        long long inv=q_pow(len,MOD-2,MOD);///逆元
        for(int i=0;i<len;i++)F[i]=(F[i]%MOD*inv)%MOD;
    } //p(F);
}
void work(){///卷积，点乘，插值
    NTT(a,len,1); NTT(b,len,1);
    for(int i=0;i<len;i++) a[i]=(a[i]*b[i])%MOD;
    NTT(a,len,-1);
}
void pushup(){///进位
    for(int i=0;i<len;i++) 
        if(a[i]>=10) { a[i+1]+=a[i]/10; a[i]=a[i]%10; }    
}
void print(){///输出
    int high=0;
    for(int i=len-1;i>=0;i--) 
        if(a[i]) { high=i; break; }
    for(int i=high;i>=0;i--)printf("%lld",a[i]);
    puts("");
}
