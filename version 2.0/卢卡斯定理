/*
 * @Samaritan_infi
 */
/// 卢卡斯定理: 求大组合数 C(n, m) % p
#include <bits/stdc++.h>
using namespace std;
long long F[1000010];
const int mod = 1e9 + 7;
void init(long long p) {
    F[0] = 1;
    for(int i = 1;i <= p;i++)
        F[i] = F[i-1]*i % mod;
}
long long inv(long long a,long long m) {
    if(a == 1)return 1;
    return inv(m%a,m)*(m-m/a)%m;
}
long long Lucas(long long n,long long m,long long p) {
    long long ans = 1;
    while(n&&m) {
        long long a = n%p, b = m%p;
        if(a < b)return 0;
        ans = ans*F[a]%p*inv(F[b]*F[a-b]%p,p)%p;
        n /= p; m /= p;
    }
    return ans;
}
int main () {
    init(1000000);
    long long a, b, c = 1e9 + 7;
    while (cin >> a >> b) cout << Lucas(a, b, c) << endl;
    return 0;
}
